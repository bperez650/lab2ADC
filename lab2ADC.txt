#include <asf.h>


void clockSetup(void);
void wait(volatile int d);
void portSetup(void);
void ADCsetup(void);
void convert(int t);
double mod(double a, double b);
void display(int *a);

volatile int result = 0;
volatile int array[4];
volatile int *ptr;
	

int main (void){
	
	system_init();
 	clockSetup();
	portSetup();
	ADCsetup();

	Port *port = PORT;
	PortGroup *porA = &(port->Group[0]);
	PortGroup *porB = &(port->Group[1]);
	porA -> DIRSET.reg = PORT_PA04 | PORT_PA05 | PORT_PA06 | PORT_PA07;//outputs
	porB -> DIRSET.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB03 | PORT_PB04 | PORT_PB05 | PORT_PB06 | PORT_PB07;//LED segments
	porA->DIRSET.reg = PORT_PA12;
	ptr = array;
	
	porA->OUTSET.reg = 1<<12;
	ADC->INTENSET.reg = ADC_INTENSET_RESRDY;	//setup interrupt when reg is ready to be read	

	while(1){	
		porA -> OUTSET.reg = PORT_PA04 | PORT_PA05 | PORT_PA06 | PORT_PA07;//outputs
		//porA->OUTSET.reg = 1<<12;
		//ADC->INTENSET.reg = ADC_INTENSET_RESRDY;	//setup interrupt when reg is ready to be read	
		//ADC->CTRLA.reg |= 1<<1;	//enable ADC
		//while (ADC->STATUS.bit.SYNCBUSY==1){}	//wait for enable to complete
		wait(1);
		convert(result);
	
		porA->OUTCLR.reg = 	PORT_PA07;
		display(ptr);
		wait(1);
		porA->OUTSET.reg = 	PORT_PA07;

		porA->OUTCLR.reg = 	PORT_PA06;
		display(ptr + 1);
		wait(1);
		porA->OUTSET.reg = 	PORT_PA06;
		
		porA->OUTCLR.reg = 	PORT_PA05;
		display(ptr + 2);
		wait(1);
		porA->OUTSET.reg = 	PORT_PA05;
		
		porA->OUTCLR.reg = 	PORT_PA04;
		display(ptr + 3);
		wait(1);
		porA->OUTSET.reg = 	PORT_PA04;
		
		porA->OUTSET.reg = 1<<12;
		wait(10);
		ADC->INTENSET.reg = ADC_INTENSET_RESRDY;	//setup interrupt when reg is ready to be read	
	}
}

// setting up a clock
void clockSetup(void){
//setting up the clock source

	/* Various bits in the INTFLAG register can be set to one at startup.
		This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET | SYSCTRL_INTFLAG_DFLLRDY;
	SYSCTRL->OSC8M.bit.PRESC = 0;	//divide the clock by 8	so 1MHz still
	SYSCTRL->OSC8M.bit.ONDEMAND = 1;	//clock is off is no peripheral request
	SYSCTRL->OSC8M.bit.RUNSTDBY = 0;	//clock is off in sleep mode
	SYSCTRL->OSC8M.reg |= 1<<1;	//enable clock
	//SYSCTRL->OSC8M.bit.FRANGE = 2;	//yet another way to control manipulate the clock freq	
	
	SYSCTRL->OSC32K.bit.STARTUP = 0;	//start up asap
	SYSCTRL->OSC32K.bit.ONDEMAND = 1;	//clock is off if no peripheral request
	SYSCTRL->OSC32K.bit.RUNSTDBY = 1;	//clock is on in sleep mode
	SYSCTRL->OSC32K.bit.EN32K = 1;	//enable output
	SYSCTRL->OSC32K.reg |= 1<<1;	//enable clock
	
//setting up the clock generator

	GCLK->CTRL.bit.SWRST = 1;	//reset the generators
	while (GCLK->STATUS.bit.SYNCBUSY){}	//waiting for the reset to complete  
		
	GCLK->GENDIV.reg = GCLK_GENDIV_ID(0) | GCLK_GENDIV_DIV(1);	//divide generator0 by 1
	
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(0) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_OE |
	GCLK_GENCTRL_SRC_OSC8M | GCLK_GENCTRL_RUNSTDBY;
	
	//this section chooses what Genclk goes to what peripheral
	while (GCLK->STATUS.bit.SYNCBUSY){}	//waiting for sync to complete  
	GCLK->CLKCTRL.reg |= 0<<14;	//disable clock

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_ADC | GCLK_CLKCTRL_GEN_GCLK0 | 1<<14;	//setup genclk for ADC

	while (GCLK->STATUS.bit.SYNCBUSY==1){}	//waiting for sync to complete  
		
// setting up the CPU and APB and AHB buses clocks
	PM->CPUSEL.bit.CPUDIV = 0;	//divide CPU clock by 1	pg 15
	PM->APBASEL.bit.APBADIV = 0;	//divide apba bus by 1
	PM->APBBSEL.bit.APBBDIV = 0;	//divide apbb bus by 1 
	PM->APBCSEL.bit.APBCDIV = 0;	//divide apbc bus by 1
	PM->APBAMASK.reg |= 1<<3;	//enable the GCLK clock DONT THINK NECESSARY they should be enabled by default pg 159
	PM->APBCMASK.reg |= 1<<16;	//enable the ADC APB

}

void portSetup(void){
	Port *por = PORT;
	PortGroup *porB = &(por->Group[1]);
	PortGroup *porA = &(por->Group[0]);
	porA->DIRSET.reg = PORT_PA12;	//setting up PB00 as output
	porA->PMUX[5].bit.PMUXO = 1;	//mux the ADC to pin PA11 (11=2*n+1)	AIN[19]
	porA->PINCFG[11].bit.PMUXEN =1;	//enable the MUX
	
}

void wait(volatile int d){
	int count = 0;
	while (count < d*1000){
		count++;
	}
}

void ADCsetup(void){
	ADC->CTRLA.reg = 0<<1;	//disable so that we can reset
	while (ADC->STATUS.bit.SYNCBUSY==1){}	//wait for disable to complete
	ADC->CTRLA.bit.SWRST = 1;	//reset
	while (ADC->STATUS.bit.SYNCBUSY==1){}	//wait for reset to complete
	ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;	//internal reference = .5VDDann
	//ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 | ADC_CTRLB_RESSEL_12BIT | ADC_CTRLB_FREERUN | 0<<0 | ADC_CTRLB_CORREN;
	ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 | ADC_CTRLB_RESSEL_12BIT | ADC_CTRLB_FREERUN | 0<<0;
	while (ADC->STATUS.bit.SYNCBUSY==1){}	//wait for sync to complete
	ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_MUXPOS_PIN19;	//pin0=AIN0=PA02, pin4=AIN4=PA04
	ADC->INPUTCTRL.bit.GAIN = 0xF;	//gain = 1/2
	while (ADC->STATUS.bit.SYNCBUSY==1){}	//wait for sync to complete
		
//loads calibration values from NVM
	short *NVM = (short *) 0x806023;	//address of the ADC calib
	short temp1 = *NVM;
	short temp2 = temp1 & 0x7F8;	//masking unnecessary bits
	temp2 = temp2 >>3;	//shift to the right location
	//ADC->CALIB.bit.LINEARITY_CAL = temp2;
	short temp3 = temp1 & 0x3800;	//masking unnecessary bits
	temp3 = temp3 >>11;	//shift to the right location
	//ADC->CALIB.bit.BIAS_CAL = temp3;
	//ADC->CALIB.bit.LINEARITY_CAL = 0x2;
	//ADC->CALIB.bit.BIAS_CAL = 0x7;
		
	ADC->SWTRIG.bit.START = 1;	//start conversion
	while (ADC->STATUS.bit.SYNCBUSY==1){}	//wait for sync to complete
	ADC->INTENSET.reg = ADC_INTENSET_RESRDY;	//setup interrupt when reg is ready to be read	
	ADC->CTRLA.reg |= 1<<1;	//enable ADC
	while (ADC->STATUS.bit.SYNCBUSY==1){}	//wait for enable to complete
	NVIC->ISER[0] |= 1<<23;	//enable the NVIC handler
	ADC->OFFSETCORR.reg = 0b000000110100;	//shift down by 52, 2's comp
	ADC->GAINCORR.reg =   0b100010100000;	//when corren is enabled it enables gain comp too, fractional
}

void ADC_Handler(void){
	ADC->INTENCLR.reg = ADC_INTENCLR_RESRDY;	//setup interrupt when reg is ready to be read		
	Port *port = PORT;
	PortGroup *porA = &(port->Group[0]);
	porA->OUTCLR.reg = PORT_PA12;
	result = ADC->RESULT.reg;
	//ADC->CTRLA.reg |= 0<<1;	//disable ADC
	//while (ADC->STATUS.bit.SYNCBUSY==1){}	//wait for enable to complete
}

void convert(int t){
	//double x = 4096;
	volatile double x = t;
	x *= .000805;
	double y = 0;
	double i = 1;
	int j = 0;
	//int array[4];
	//int *ptr;
	//ptr = array;

	while(j!= 4){
		y = mod(x,i);
		if(y == x){
			array[j++] = (--i);
			x = x - i;
			x = x * 10;
			i = 0;
		}
		if(j == 1){
			array[j++] = 99;
		}
		i++;
	}
	//display(ptr);
}

void display(int *a){
	int i = 0;
	Port *ports = PORT_INSTS;
	PortGroup *porA = &(ports->Group[0]);
	PortGroup *porB = &(ports->Group[1]);
	
	//porA -> DIRSET.reg = PORT_PA04 | PORT_PA05 | PORT_PA06 | PORT_PA07;//outputs
	//porB -> DIRSET.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB03 | PORT_PB04 | PORT_PB05 | PORT_PB06 | PORT_PB07;//LED segments
	//porA->OUTSET.reg = 	PORT_PA04 | PORT_PA05 | PORT_PA06 | PORT_PA07;
	//
	//while(i <= 3){
		//if(i == 0){
		//porA->OUTCLR.reg = PORT_PA07;
		//}
		//if(i == 1){
		//porA->OUTCLR.reg = PORT_PA06;
		//}
		//if(i == 2){
		//porA->OUTCLR.reg = PORT_PA05;
		//}
		//if(i == 3){
		//porA->OUTCLR.reg = PORT_PA04;
		//}
	//
		switch(*a){
		
			case 0:
			porB -> OUTSET.reg = PORT_PB07 | PORT_PB06;//display "0"
			porB -> OUTCLR.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB03 | PORT_PB04 | PORT_PB05;//display "0"
			a++;
			i++;
			//wait(1);
			//porB -> OUTSET.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB03 | PORT_PB04 | PORT_PB05 | PORT_PB06 | PORT_PB07;//turn off display

			break;
		
			case 1:
			porB -> OUTSET.reg = PORT_PB00 | PORT_PB03 | PORT_PB04 | PORT_PB05 | PORT_PB06 | PORT_PB07;//display "1"
			porB -> OUTCLR.reg = PORT_PB01 | PORT_PB02;//display "1"
			a++;
			i++;
		//	wait(1);
			//porB -> OUTSET.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB03 | PORT_PB04 | PORT_PB05 | PORT_PB06 | PORT_PB07;//turn off display

			break;
		
			case 2:
			porB -> OUTSET.reg =  PORT_PB02 | PORT_PB05 | PORT_PB07;//display "2"
			porB -> OUTCLR.reg = PORT_PB00 | PORT_PB01 | PORT_PB03 | PORT_PB04 | PORT_PB06;//display "2"
			a++;
			i++;
		//	wait(1);
		//	porB -> OUTSET.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB03 | PORT_PB04 | PORT_PB05 | PORT_PB06 | PORT_PB07;//turn off display

			break;
		
			case 3:
			porB -> OUTSET.reg = PORT_PB04 | PORT_PB05 | PORT_PB07;//display "3"
			porB -> OUTCLR.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB03 | PORT_PB06;//display "3"
			a++;
			i++;
		//	wait(1);
			//porB -> OUTSET.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB03 | PORT_PB04 | PORT_PB05 | PORT_PB06 | PORT_PB07;//turn off display

			break;
		
			case 4:
			porB -> OUTSET.reg = PORT_PB00 | PORT_PB03 | PORT_PB04 | PORT_PB07;//display "4"
			porB -> OUTCLR.reg = PORT_PB01 | PORT_PB02 | PORT_PB05 | PORT_PB06;//display "4"
			a++;
			i++;
		//	wait(1);
		//	porB -> OUTSET.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB03 | PORT_PB04 | PORT_PB05 | PORT_PB06 | PORT_PB07;//turn off display

			break;
		
			case 5:
			porB -> OUTSET.reg = PORT_PB01 | PORT_PB04 | PORT_PB07;//display "5"
			porB -> OUTCLR.reg = PORT_PB00 | PORT_PB02 | PORT_PB03 | PORT_PB05 | PORT_PB06;//display "5"
			a++;
		//	wait(1);
		//	porB -> OUTSET.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB03 | PORT_PB04 | PORT_PB05 | PORT_PB06 | PORT_PB07;//turn off display

			break;
		
			case 6:
			porB -> OUTCLR.reg = PORT_PA00 | PORT_PA02 | PORT_PA03 | PORT_PA04 | PORT_PA05 | PORT_PA06;//display "6"
			porB -> OUTSET.reg = PORT_PB01 | PORT_PB07;//display "6"
			a++;
			i++;
		//	wait(1);
			//porB -> OUTSET.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB03 | PORT_PB04 | PORT_PB05 | PORT_PB06 | PORT_PB07;//turn off display

			break;
		
			case 7:
			porB -> OUTCLR.reg = PORT_PA00 | PORT_PA01 | PORT_PA02;//display "7"
			porB -> OUTSET.reg = PORT_PB03 | PORT_PB04| PORT_PB05 | PORT_PB06 | PORT_PB07;//display "7"
			a++;
			i++;
		//	wait(1);
			//porB -> OUTSET.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB03 | PORT_PB04 | PORT_PB05 | PORT_PB06 | PORT_PB07;//turn off display

			break;
		
			case 8:
			porB -> OUTCLR.reg = PORT_PA00 | PORT_PA01 | PORT_PA02 | PORT_PB03 | PORT_PB04| PORT_PB05 | PORT_PB06;//display "8"
			porB -> OUTSET.reg = PORT_PB07;//display "8"
			a++;
			i++;
		//	wait(1);
			//porB -> OUTSET.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB03 | PORT_PB04 | PORT_PB05 | PORT_PB06 | PORT_PB07;//turn off display

			break;
		
			case 9:
			porB -> OUTCLR.reg = PORT_PA00 | PORT_PA01 | PORT_PA02 | PORT_PB05 | PORT_PB06;//display "8"
			porB -> OUTSET.reg = PORT_PB03 | PORT_PB04 | PORT_PB07;//display "8"
			a++;
			i++;
		//	wait(1);
			//porB -> OUTSET.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB03 | PORT_PB04 | PORT_PB05 | PORT_PB06 | PORT_PB07;//turn off display

			break;
			
			case 99:
			porB -> OUTSET.reg = PORT_PB06 | PORT_PB05 | PORT_PB04 | PORT_PB03 | PORT_PB02 | PORT_PB01 | PORT_PB00;//display "."
			porB -> OUTCLR.reg = PORT_PB07;//display "."
			a++;
			i++;
			//wait(1);
			//porB -> OUTSET.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB03 | PORT_PB04 | PORT_PB05 | PORT_PB06 | PORT_PB07;//turn off display

			break;
		
			default:
			porB -> OUTSET.reg = PORT_PB03 | PORT_PB07;//display "A"
			porB -> OUTCLR.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB04 | PORT_PB05 | PORT_PB06;//display "A"
			i++;
		//	wait(1);
			//porB -> OUTSET.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB03 | PORT_PB04 | PORT_PB05 | PORT_PB06 | PORT_PB07;//turn off display

			break;
		}
	//}
	//ADC->CTRLA.reg = 1<<1;	//enable ADC
	//while (ADC->STATUS.bit.SYNCBUSY==1){}	//wait for enable to complete
}

double mod(double a, double b){
	int c;
	double d;
	c = (int)a / (int)b;
	d = a - ((double)c * b);
	return d;
}



